import { Injectable } from '@angular/core';
import { EventSchedulerConfig } from '../urls/event-scheduler-url.config';
import * as i0 from "@angular/core";
import * as i1 from "./http.service";
export class EventSchedulerService {
    http;
    constructor(http) {
        this.http = http;
    }
    youthEventSearch(searchText) {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.youthEventSearch + searchText);
    }
    getLabels(categoryname) {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.getLabels + categoryname);
    }
    createEvent(modal) {
        return this.http.post(EventSchedulerConfig.EndPoint.Appointment.createEvent, modal);
    }
    updateEvent(id, modal) {
        return this.http.patch(EventSchedulerConfig.EndPoint.Appointment.updateEvent + id, modal);
    }
    deleteEvent(id) {
        return this.http.delete(EventSchedulerConfig.EndPoint.Appointment.deleteEvent + id);
    }
    getListEvents() {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.listEvents);
    }
    getListUsers(orgid) {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.ListUsers.replace('{orgid}', orgid));
    }
    getEventType(eventType) {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.getLabels + eventType);
    }
    completeEvent(id, modal) {
        return this.http.patch(EventSchedulerConfig.EndPoint.Appointment.completeEvent1 +
            id +
            EventSchedulerConfig.EndPoint.Appointment.completeEvent2, modal);
    }
    getEventInfo(eventId) {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.getEvent + eventId);
    }
    addEventOutcome(modal) {
        return this.http.post(EventSchedulerConfig.EndPoint.Appointment.addEventOutcome, modal);
    }
    createEventAttachement(modal) {
        return this.http.post(EventSchedulerConfig.EndPoint.Appointment.createEventAttachement, modal);
    }
    uploadKey(objparams) {
        return this.http.post(EventSchedulerConfig.EndPoint.Appointment.UploadKey, objparams);
    }
    deleteEventAttachment(eventId) {
        return this.http.delete(EventSchedulerConfig.EndPoint.Appointment.eventAttachment + eventId);
    }
    updateEventOutcome(id, modal) {
        return this.http.patch(EventSchedulerConfig.EndPoint.Appointment.updateEventOutcome1 +
            id +
            EventSchedulerConfig.EndPoint.Appointment.updateEventOutcome2, modal);
    }
    createYouthEvent(objparams) {
        return this.http.post(EventSchedulerConfig.EndPoint.Appointment.createEventYouth, objparams);
    }
    upadateEventWithYouthid(id, modal) {
        return this.http.patch(EventSchedulerConfig.EndPoint.Appointment.updateEventYouth + id, modal);
    }
    getEventByYouthId(youthId) {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.getEventByYouthId + youthId);
    }
    getCategoryLookup(name) {
        return this.http.get(EventSchedulerConfig.EndPoint.Attachments.GetCategoryLookup + '/' + name);
    }
    getHolidayList() {
        return this.http.get(EventSchedulerConfig.EndPoint.Appointment.HolidayList);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: EventSchedulerService, deps: [{ token: i1.HttpService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: EventSchedulerService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: EventSchedulerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpService }]; } });
//# sourceMappingURL=data:application/json;base64,