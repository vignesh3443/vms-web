import { Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { AlertService } from './alert.service';
import { HttpService } from './http.service';
import { DynamicTabPageService } from './dynamic-tab-page-service';
import { PageHeaderService } from './page-header.service';
import { AuthStore } from './auth.store';
import { CredentialsService } from './credentials.service';
import { LocalService } from './local.service';
import * as i0 from "@angular/core";
export declare class AuthService {
    private httpService;
    private store;
    private _router;
    private credentialsService;
    private localstore;
    sharedInfo: any;
    alertService: AlertService;
    dynamicTabPageService: DynamicTabPageService;
    pageHeaderService: PageHeaderService;
    constructor(injector: Injector, httpService: HttpService, store: AuthStore, _router: Router, credentialsService: CredentialsService, localstore: LocalService);
    orgInfo: BehaviorSubject<any>;
    currentOrgInfo: Observable<any>;
    currentMenu: BehaviorSubject<any>;
    currentMenuInfo: Observable<any>;
    feedOrgInfo(data: any): void;
    getCurrentMenu(data: any): void;
    getUserOrgList(): Observable<Object>;
    getUnNotified(): Observable<Object>;
    updateUnNotified(data: any): Observable<Object>;
    updateWorkerAvailability(data: any): Observable<Object>;
    getWorkerAvailability(): Observable<Object>;
    getMstrToken(): Observable<Object>;
    login(email: string, password: string, otp: string): Observable<any>;
    refreshToken(platform?: string): Observable<unknown>;
    resetLoggedIn(): void;
    logout(): void;
    getUserInfo(): Observable<[any]>;
    getUserRole(id: any): Observable<any>;
    routeToDynamicPage(orgid: any): Observable<any>;
    getAuthMe(): Observable<Object>;
    ResetPassword(data: any): Observable<Object>;
    getRoleKey(): any;
    isAdmin(): boolean;
    getOrgID(): any;
    conformMail(data: any): Observable<Object>;
    changePassword(data: any): Observable<Object>;
    setSharedMessage(data: any): void;
    getSharedMessage(): any;
    checkDynamicPagePermission(pageId: any): Promise<void>;
    getCurrentOrg(): Promise<any>;
    getAuthorizedPages(): Promise<any>;
    getCustomPage(page: any): any;
    validateToken(token: string, requestObject: any): Observable<any>;
    generateLoginUrl(): Observable<Object>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthService>;
}
