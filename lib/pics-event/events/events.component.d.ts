import { OnInit } from '@angular/core';
import { FullCalendarComponent } from '@fullcalendar/angular';
import { CalendarOptions, DateSelectArg, EventApi, EventClickArg } from '@fullcalendar/core';
import { AlertService } from '../@core/service/alert.service';
import { HttpService } from '../@core/service/http.service';
import { EventSchedulerService } from '../@core/service/event-scheduler.service';
import { Subscription } from 'rxjs';
import { DataStoreService } from '../@core/service/data-store.service';
import { RBACINFO } from '../@core/urls/event-scheduler-url.config';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import * as i0 from "@angular/core";
export declare class EventsComponent implements OnInit {
    private _formBuilder;
    private _eventSchedulerService;
    private _alertService;
    private _httpService;
    private _route;
    private _router;
    private _storeservice;
    calendarComponent: FullCalendarComponent;
    startDatePicker: any;
    endDatePicker: any;
    selectDate: DateConstructor;
    miniDate: Date;
    eventForm: FormGroup;
    uploadedForm: FormGroup;
    calendarVisible: boolean;
    dynamicYouthId: string;
    eventList: any[];
    visible: boolean;
    HolidayList: any;
    selectedlabel: any;
    isPublicHoliday: boolean;
    calendarOptions: CalendarOptions;
    sessionStorage: any;
    renderEventContent(eventInfo: any, _createElement: any): any;
    checkAll: boolean;
    selectLabel: any[];
    referralAutoSuggestion: boolean;
    referralAutoList: any;
    selectDatepickerValue: Date;
    isSubmit: boolean;
    eventTypeList: any[];
    labelName: string;
    userList: any[];
    isOwner: boolean;
    isVirtual: boolean;
    isFaceToFace: boolean;
    ownerDetails: any;
    outcomeList: any[];
    eventAttachments: any[];
    uploadedFile: any;
    urlPath: string;
    isCalendar: boolean;
    LookupList: any;
    categoryList: any;
    subCategoryList: any;
    uploadedDate: any;
    uploadedPerson: any;
    conflictAppointment: boolean;
    attachType: any;
    selectedIndex: number;
    youthId: any;
    environment: any;
    AddButton: boolean;
    addholiday: boolean;
    RBACORG: RBACINFO;
    PERMISSION: any;
    orgSubs: Subscription;
    orgId: any;
    constructor(_formBuilder: FormBuilder, _eventSchedulerService: EventSchedulerService, _alertService: AlertService, _httpService: HttpService, _route: ActivatedRoute, _router: Router, _storeservice: DataStoreService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    initializeClientForm(): void;
    get eventFormControl(): {
        [key: string]: import("@angular/forms").AbstractControl<any, any>;
    };
    checkDates(group: FormGroup): {
        notValid: boolean;
    };
    getUsers(): void;
    getLabels(): void;
    getEventType(): void;
    getEventList(): void;
    addEvent(): void;
    addInputRequest(eventForm: any): any;
    eventAdd(createEvent: any): void;
    updateEvent(): void;
    updateEventInputRequest(eventFormData: any): any;
    eventUpdate(createEvent: any): void;
    deleteEvent(): void;
    handleCalendarToggle(): void;
    handleWeekendsToggle(): void;
    handleDateSelect(selectInfo: DateSelectArg): void;
    handleEventClick(clickInfo: EventClickArg): void;
    handleEvents(_events: EventApi[]): void;
    selectDateforListView(selectDate: any): void;
    toggleCheckboxAll(event: any): void;
    checkboxChange(event: any, id: any): void;
    reloadEvents(): void;
    allChecked(): boolean;
    closePopup(): void;
    handleEventAdd(_selectInfo: any): void;
    handleEventChange(_selectInfo: any): void;
    handleEventRemove(_selectInfo: any): void;
    /**
     * Add Event Class
     *
     * @param s
     */
    eventClass(s: any): string;
    startDate(_date: any): void;
    endDate(_date: any): void;
    arryFormate(form: any): any;
    externalUrl(form: any): any;
    addGuestUsers(form: any): any;
    onKeyUp($event: any): void;
    searchYouth(youthid: any, status: any): void;
    selectReferral(_data: any): void;
    outSideAddEvent(status: any): void;
    getAppointmentsForSpecificDate(selectInfo: any): void;
    loadLabel(modal: any): any;
    getColor(key: any): any;
    loadReferral(modal: any): any;
    loadAddUsers(modal: any): any;
    loadexternalUsers(modal: any): any;
    makeString(): string;
    getUrl(): void;
    openNewWindow(): void;
    isDisabled(): any;
    isEventOwner(): any;
    outComeCompleted(): any;
    viewEventType(): any;
    viewLable(): any;
    viewGuest(): any;
    viewExternalUsers(): any;
    virtualVadation(): any;
    eventTypeValidation(): void;
    onchangeEventtype(): void;
    validateUpload(): any;
    validateOutCome(): any;
    completeEvent(): void;
    getEvent(event_id: any, status: any): void;
    patchEventInfo(_res: any, status: any): void;
    getYouthInfo(eventYouth: any): any;
    submitOutCome(): void;
    addOutCome(modalInput: any): void;
    updateOutCome(modalInput: any): void;
    getOutComeList(): void;
    deleteAttachment(fileValue: any): void;
    download(fileValue: any): void;
    handleFileInput(fileValue: any): void;
    uploadToS3(file: any, data: any): void;
    createAttachement(): void;
    createEventAttachement(saveAttachedFile: any): void;
    attachementvalidation(): boolean;
    datetimeUtc(datetime: any): any;
    startEndDatetimeUtc(datetime: any): any;
    clearUploadedFile(): void;
    subcategoryByCategory(categoryvalue: any): void;
    getCategoryLookup(): void;
    dateCheck(from: any, to: any): void;
    conformAppointment(): void;
    toVerifyEventUpdate(): void;
    updateConflict(): void;
    toVerifyEventAdd(): void;
    addConflict(): void;
    saveEventWithYouthid(): void;
    splitYouthID(youthInfo: any): any;
    upadateEventWithYouthid(): void;
    getAttachementType(fileName: any): any;
    navigateTo(): void;
    getHolidayList(): void;
    addEventGrid(status: any): void;
    holidayLable(): void;
    CalendarValueAssign(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EventsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EventsComponent, "event-scheduler", never, {}, {}, never, never, false, never>;
}
